'use strict';

const Fs = require('fs');
const Path = require('path');
const Events = require('events');
const _ = require('underscore');
const __ = require('lodash');
const writeFileAtomic = require('write-file-atomic')

class Bionic extends Events {

    dbPath = '';

    constructor(name, dir = './') {

        if (!name) {

            throw Error('database needs a name');
        }


        const options = {
           dbPath: dir + 'tmp'
        }
        
        const mkdir = function(path) {
        
            const split = path.split('/');
            const p = [];
        
            let dir_;
        
            while (split.length) {
        
                p.push(split.shift());
        
                dir_ = Path.join.apply(Path.join, p);
                if (!Fs.existsSync(dir_)) {
        
                    Fs.mkdirSync(dir_);
                }
            }
        
        
        };

        super();

        this.saveTimer = null;

        mkdir(options.dbPath);
        if(name !== '_data'){
            this.dbPath = Path.join(options.dbPath, `${name}.json`);

            if (Fs.existsSync(this.dbPath)) {
                this.db = JSON.parse(Fs.readFileSync(this.dbPath).toString());
        }else {
                this.db = {};
                this.save();
            }
        }
    }

    save() {

        const self = this;

        if (this.saveTimer) {

            clearTimeout(this.saveTimer);
        }

        this.saveTimer = setTimeout(function() {

            writeFileAtomic(self.dbPath, JSON.stringify(self.db));

        }, 100);
    }

    find(table, where) {

        if (!this.db[table]) {

            return false;
        }

        if (!where) {

            where = {};
        }

        let whereFn;
        let _fn;

        if (typeof where === 'object') {
            whereFn = where;
            _fn = 'where';
        }

        if (typeof where === 'number') {
            whereFn = function (row, id) {
                return where === id;
            }
            _fn = 'filter';
        }

        if (typeof where === 'string') {
            whereFn = function (row, id) {

                return where === row;
            }
            _fn = 'filter';
        }

        const found = _[_fn](this.db[table], whereFn);


        return found;
    }



    filter(table, search) {

        let filt = this.find(table, {})

        if (filt) {
            let result = filt.filter(search)
            return result
        } else {
            return []
        }

    }

    create(table, data) {

        if (!this.db[table]) {

            this.db[table] = [];
        }

        if (typeof data === 'object') {

            if (!data.id) {
                const last = this.db[table][this.db[table].length-1];

                if (last) {

                    data.id = last.id + 1
                }
                else {

                    data.id = 1;
                }
            }
          
    
        }

        this.db[table].push(data);

        this.save();
       
        return data;
    }

    update(table, where, data) {

        if (!this.db[table]) {

            return false;
        }

        let result = false;
        this.db[table] = this.db[table].map((row, id) => {

            let updated = false;

            if (typeof where === 'object') {
      
                if (_.isMatch(row, where)) {
                    updated = true;
                    __.merge(row, data);

                    result = row;
                    
                }
            }

            if (typeof where === 'number') {
                if (where === id) {

                    updated = true;
                    row = data;

                    result = row;
                }
            }

            if (typeof where === 'string') {
                if (where === data) {

                    updated = true;
                    row = data;
                    result = row;
                }
            }

            return row;
        });


        this.save();

        return result;
    }

    remove(table, where) {

        if (!this.db[table]) {

            return false;
        }

        const removed = [];

        const self = this;
        let result = false;
        this.db[table] = _.reject(this.db[table], (row, id) => {

            let rmv = null;

            if (typeof where === 'object') {
                rmv = _.isMatch(row, where);
                result = row;
            }

            if (typeof where === 'number') {
                rmv = id === where;
            }

            if (typeof where === 'string') {
                rmv = row === where;
            }

            if (rmv === null) {

                rmv = !where
            }

            if (rmv) {

                removed.push(row);
            }

            return rmv;
        });

        self.save();

        return result;
    }
}


module.exports = Bionic;
